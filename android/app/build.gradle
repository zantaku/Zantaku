apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

import java.net.URL

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

    // Use Expo CLI to bundle the app, this ensures the Metro config
    // works correctly with Expo projects.
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"

    /* Folders */
     //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]

    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion

    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.kamilist.app"
    defaultConfig {
        applicationId 'com.kamilist.app'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
        
        // Network optimization for API reliability
        manifestPlaceholders = [
            networkSecurityConfig: "@xml/network_security_config"
        ]
        
        // Additional build config values for API handling
        buildConfigField "String", "TAKIAPI_PRIMARY", '"https://takiapi.xyz"'
        buildConfigField "String", "TAKIAPI_MIRROR1", '"https://api.takiapi.xyz"'
        buildConfigField "String", "TAKIAPI_MIRROR2", '"https://cdn.takiapi.xyz"'
        buildConfigField "String", "KATANA_PRIMARY", '"https://magaapinovel.xyz"'
        buildConfigField "String", "KATANA_FALLBACK", '"https://takiapi.xyz/manga"'
    }
    
    splits {
        abi {
            reset()
            enable true
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD
                keyAlias MYAPP_UPLOAD_KEY_ALIAS
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.debug // Change this to signingConfigs.release when you have a release keystore
            shrinkResources false
            minifyEnabled false
            // proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            crunchPngs true
            zipAlignEnabled true
            debuggable false
            
            // Optimize for network reliability in release builds
            buildConfigField "boolean", "API_DEBUG_MODE", "false"
            buildConfigField "int", "API_TIMEOUT_MS", "15000"
            buildConfigField "int", "API_RETRY_COUNT", "3"
        }
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
        // Exclude problematic FFmpeg Kit language files with invalid paths
        excludes += [
            '**/language/**',
            '**/ash_approx_any.txt',
            '/language/**'
        ]
    }
    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }
    
    // Repository configuration - using official dependencies now
    // repositories {
    //     flatDir {
    //         dirs "$rootDir/libs"
    //     }
    // }
}

// Apply static values from `gradle.properties` to the `android.packagingOptions`
// Accepts values in comma delimited lists, example:
// android.packagingOptions.pickFirsts=/LICENSE,**/picasa.ini
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    // Split option: 'foo,bar' -> ['foo', 'bar']
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",");
    // Trim all elements in place.
    for (i in 0..<options.size()) options[i] = options[i].trim();
    // `[] - ""` is essentially `[""].filter(Boolean)` removing all empty strings.
    options -= ""

    if (options.length > 0) {
        println "android.packagingOptions.$prop += $options ($options.length)"
        // Ex: android.packagingOptions.pickFirsts += '**/SCCS/**'
        options.each {
            android.packagingOptions[prop] += it
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

    if (isGifEnabled) {
        // For animated gif support
        implementation("com.facebook.fresco:animated-gif:${reactAndroidLibs.versions.fresco.get()}")
    }

    if (isWebpEnabled) {
        // For webp support
        implementation("com.facebook.fresco:webpsupport:${reactAndroidLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            // Animated webp support
            implementation("com.facebook.fresco:animated-webp:${reactAndroidLibs.versions.fresco.get()}")
        }
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
    
    // FFmpeg Kit removed - project has been retired and dependencies are no longer available
    // implementation 'com.arthenica:ffmpeg-kit-https:6.0'
    // implementation 'com.arthenica:smart-exception-java:0.2.1'
    
    // Enhanced networking libraries for better API reliability
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'
}

// Add script to download FFmpeg Kit AAR from alternative source
afterEvaluate {
    def aarUrl = 'https://github.com/NooruddinLakhani/ffmpeg-kit-full-gpl/releases/download/v1.0.0/ffmpeg-kit-full-gpl.aar'
    def aarFile = file("${rootDir}/libs/ffmpeg-kit-https.aar")

    tasks.register("downloadFFmpegKitAar") {
        doLast {
            if (!aarFile.parentFile.exists()) {
                println "📁 Creating directory: ${aarFile.parentFile.absolutePath}"
                aarFile.parentFile.mkdirs()
            }
            if (!aarFile.exists()) {
                println "⏬ Downloading FFmpeg Kit AAR from $aarUrl..."
                try {
                    new URL(aarUrl).withInputStream { i ->
                        aarFile.withOutputStream { it << i }
                    }
                    println "✅ FFmpeg Kit AAR downloaded to ${aarFile.absolutePath}"
                } catch (Exception e) {
                    println "❌ Failed to download FFmpeg Kit AAR: ${e.message}"
                    println "Please manually download the AAR file and place it at ${aarFile.absolutePath}"
                }
            } else {
                println "ℹ️ FFmpeg Kit AAR already exists at ${aarFile.absolutePath}"
            }
        }
    }

    // Add task to verify API endpoints are reachable during build
    tasks.register("verifyApiEndpoints") {
        doLast {
            def endpoints = [
                'https://takiapi.xyz',
                'https://api.takiapi.xyz', 
                'https://magaapinovel.xyz'
            ]
            
            println "🔍 Verifying API endpoints reachability..."
            endpoints.each { endpoint ->
                try {
                    def connection = new URL("${endpoint}/health").openConnection()
                    connection.setConnectTimeout(5000)
                    connection.setReadTimeout(5000)
                    connection.connect()
                    println "✅ ${endpoint} - Reachable"
                } catch (Exception e) {
                    println "⚠️ ${endpoint} - Not reachable (${e.message})"
                }
            }
        }
    }

    // Disabled: Make sure the AAR is downloaded before compilation begins
    // preBuild.dependsOn("downloadFFmpegKitAar")
    
    // Verify API endpoints before release builds
    tasks.matching { it.name.contains("Release") }.configureEach {
        dependsOn("verifyApiEndpoints")
    }
}
